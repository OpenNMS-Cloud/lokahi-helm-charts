{{- if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.serviceName }}
  name: {{ .Values.serviceName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.serviceName }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.serviceName }}
      annotations:
        kubectl.kubernetes.io/default-container: "{{ .Values.serviceName }}"
    spec:
      {{- if .Values.nodeRestrictions.enabled }}
      nodeSelector:                                                                                    
        {{ .Values.nodeRestrictions.key }}: {{ .Values.nodeRestrictions.value }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.nodeRestrictions.key }}"
          operator: "Equal"
          value: {{ .Values.nodeRestrictions.value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.nodeRestrictions.key }}"
                operator: In
                values:
                - {{ .Values.nodeRestrictions.value }}
      {{- end }}
      volumes:
        - name: grafana-config
          secret:
            secretName: {{ .Values.serviceName }}
            defaultMode: 420
      {{- if .Values.Citus.enabled }}
      initContainers:
        - name: wait-for-db
          image: postgres:16-alpine
          args:
          - /bin/sh
          - -c
          - | 
            set -x;
            while ! psql -U {{ .Values.Citus.adminUser }} -h postgres -c 'select 1'; do
              echo "Waiting for DB to be available"
              sleep 10
            done
            echo "Database is available"
      {{- end }}
      containers:
        - name: {{ .Values.serviceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values) | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.grafanaPort }}
          volumeMounts:
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/datasources/default.yml"
              subPath: "default.yml"
            - name: grafana-config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: "grafana.ini"
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboard.yml"
              subPath: "dashboard.yml"
            - name: grafana-config
              mountPath: "/usr/share/grafana/public/dashboards/opennms-entities.json"
              subPath: "opennms-entities.json"
            {{- if .Values.Prometheus.enabled }}
            - name: grafana-config
              mountPath: "/usr/share/grafana/public/dashboards/opennms-tenant-metrics.json"
              subPath: "opennms-tenant-metrics.json"
            {{- end }}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: {{ .Values.grafanaPort }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: 3000
          resources:
            limits:
              cpu: "{{ .Values.resources.limits.cpu }}"
              memory: "{{ .Values.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
{{- end }}

{{- if .Values.enabled }}
apiVersion: v1
kind: Secret # Currently stores passwords!
metadata:
  labels:
    app: {{ .Values.serviceName }}
  name: citus-initial-sql
  namespace: {{ .Release.Namespace }}
stringData:
  postgres.initial.script.sql: |

    CREATE DATABASE desenv;
    CREATE USER desenv WITH password '{{ .Values.password }}';
    CREATE USER grafana with password '{{ .Values.grafanaPassword }}';
    CREATE DATABASE grafana;
    GRANT ALL ON DATABASE grafana TO grafana;
    \connect grafana
    GRANT ALL ON SCHEMA public TO grafana;

    \connect desenv
    CREATE USER opennms with password '{{ .Values.openNMSPassword }}';
    GRANT ALL ON DATABASE desenv TO opennms;

    \connect desenv;

    CREATE USER keycloak with password '{{ .Values.keycloakPassword }}';
    CREATE SCHEMA IF NOT EXISTS keycloak AUTHORIZATION keycloak;

    CREATE USER inventory with password '{{ .Values.inventoryPassword }}';
    CREATE SCHEMA IF NOT EXISTS inventory AUTHORIZATION inventory;

    CREATE USER alert with password '{{ .Values.alertPassword }}';
    CREATE SCHEMA IF NOT EXISTS alert AUTHORIZATION alert;

    CREATE USER notification with password '{{ .Values.notificationPassword }}';
    CREATE SCHEMA IF NOT EXISTS notification AUTHORIZATION notification;

    CREATE USER events with password '{{ .Values.eventsPassword }}';
    CREATE SCHEMA IF NOT EXISTS events AUTHORIZATION events;

    CREATE USER datachoices with password '{{ .Values.dataChoicesPassword }}';
    CREATE SCHEMA IF NOT EXISTS datachoices AUTHORIZATION datachoices;

    CREATE USER minion_gateway with password '{{ .Values.minionGatewayPassword }}';
    CREATE SCHEMA IF NOT EXISTS minion_gateway AUTHORIZATION minion_gateway;

type: Opaque
{{- end }}

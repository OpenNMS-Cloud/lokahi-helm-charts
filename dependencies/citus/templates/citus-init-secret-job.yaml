apiVersion: batch/v1
kind: Job
metadata:
  name: create-secret-citus-initial-sql
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 5
  template:
    spec:
      serviceAccountName: default1
      containers:
      - name: create-secret-citus-initial-sql
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e
          # Wait for the postgres secret to be ready
          while [ "$(kubectl get secret postgres -n {{ .Release.Namespace }} -o jsonpath='{.data}')" == "" ]; do
            echo "Waiting for postgres secret..."
            sleep 5
          done
          # Extracting data from the postgres secret
          POSTGRES_SECRET_DATA=$(kubectl get secret postgres -n {{ .Release.Namespace }} -o jsonpath='{.data}')
          # Creating the SQL script file with proper formatting
          cat <<EOF > /tmp/formatted_sql_script.sql
          CREATE USER grafana WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .grafanaPwd | base64 --decode)';
          CREATE DATABASE grafana;
          GRANT ALL ON DATABASE grafana TO grafana;
          \connect grafana;
          GRANT ALL ON SCHEMA public TO grafana;
          \connect desenv;
          CREATE USER opennms WITH PASSWORD '{{ .Values.openNMSPassword }}';
          GRANT ALL ON DATABASE desenv TO opennms;
          \connect desenv;
          CREATE USER keycloak WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .keycloakPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS keycloak AUTHORIZATION keycloak;
          CREATE USER inventory WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .inventoryPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS inventory AUTHORIZATION inventory;
          CREATE USER alert WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .alertPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS alert AUTHORIZATION alert;
          CREATE USER notification WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .notificationPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS notification AUTHORIZATION notification;
          CREATE USER events WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .eventsPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS events AUTHORIZATION events;
          CREATE USER datachoices WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .dataChoicesPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS datachoices AUTHORIZATION datachoices;
          CREATE USER minion_gateway WITH PASSWORD '$(echo $POSTGRES_SECRET_DATA | jq -r .minionGatewayPwd | base64 --decode)';
          CREATE SCHEMA IF NOT EXISTS minion_gateway AUTHORIZATION minion_gateway;
          EOF
          # Create the citus-initial-sql secret
          kubectl create secret generic citus-initial-sql --from-file=postgres.initial.script.sql=/tmp/formatted_sql_script.sql 
      restartPolicy: OnFailure

{{- if .Values.citus.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: citus
  namespace: {{ .Release.Namespace }}
  labels:
    app: citus
  annotations:
    reloader.stakater.com/auto: 'true'
spec:
  selector:
    matchLabels:
      app: citus
  serviceName: citus
  replicas: 1
  template:
    metadata:
      labels:
        app: citus
    spec:
      securityContext:
        fsGroup: 999
      ##########################################
      #         reset key perm
      initContainers:
      - name: set-key-ownership
        image: alpine:3.16
        command:
        - sh
        - -c
        - |
          cp /root-key/* /key
          chown -R :70 /key
          chmod 0440 /key/*
          ls -lashn /key
        volumeMounts:
        - mountPath: /key
          name: citus-cert
        - mountPath: /root-key
          name: root-cert
      - name: init
        image: alpine:3.16
        command: ["sh", "-c", "chmod 777 /var/lib/postgresql"]
        volumeMounts:
          - mountPath: /var/lib/postgresql
            name: data
      ##########################################
      #         main container
      containers:
      - name: postgres
        image: citusdata/citus:12.1-alpine
        imagePullPolicy: IfNotPresent
        args:
        - sh
        - -c
        - |
          sh <<'SH' &
          node_name={{ .Values.citus.serviceName }}.${POD_NAMESPACE}.svc.cluster.local;

          echo [$(date -Iseconds)] Wait pg_isready;
          timeout 5m sh -c 'until pg_isready -U desenv --timeout=5 --quiet; do sleep 2; done;';
          pg_isready -U desenv --quiet || { echo pg not ready; kill -9 1; exit 1; };
          echo [$(date -Iseconds)] pg is ready;
          # wait for extension
          sleep 5;

          echo [$(date -Iseconds)] Wait name resolve ${node_name};
          timeout 10m sh -c "until nslookup ${node_name} > /dev/null; do sleep 2; done;";

          echo [$(date -Iseconds)] citus_set_coordinator_host ${node_name};
          su-exec postgres psql -U desenv -c "SELECT * from citus_set_coordinator_host('${node_name}', 5432);"  || {
            echo citus_set_coordinator_host failed;
            kill -9 1;
          }
          SH

          su-exec postgres "/usr/local/bin/docker-entrypoint.sh" "postgres" \
          -c ssl=on -c ssl_cert_file=/etc/citus-cert/tls.crt -c ssl_key_file=/etc/citus-cert/tls.key \
          -c wal_level=replica \
          -c config_file=/etc/postgres/postgresql.conf \
          -c hba_file=/etc/postgres/pg_hba.conf \
          ;

        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: POSTGRES_USER
          value: desenv
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        - name: citus-cert
          mountPath: "/etc/citus-cert"
          readOnly: true
        - name: conf
          mountPath: "/etc/postgres"
          readOnly: true
        - mountPath: "/docker-entrypoint-initdb.d/postgres.initial.script.sql"
          name: opennms-initialization-script
          subPath: "postgres.initial.script.sql"


        livenessProbe:
          exec:
            command:
            - 'pg_isready'
            - '-U'
            - 'desenv'
            - '--timeout=5'
            - '--quiet'
          initialDelaySeconds: 60

      volumes:
      - name: conf
        configMap:
          name: citus-conf
      - name: citus-cert
        emptyDir:
          sizeLimit: "1Gi"
      - name: root-cert
        secret:
          secretName: citus-cert
          defaultMode: 0440
      - name: opennms-initialization-script
        secret:
          secretName: citus-initial-sql


  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: citus
    spec:
      accessModes: [ "ReadWriteOnce" ]
      # storageClassName: local-path
      resources:
        requests:
          storage: {{ .Values.citus.coordinatorvolumeSize }}
{{- end }}

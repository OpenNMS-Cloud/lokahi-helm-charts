{{- if not .Values.dynamicRealmConfig }}

apiVersion: batch/v1
kind: Job
metadata:
  name: generate-keycloak-realm-configmap
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 5
  template:
    spec:
      serviceAccountName: default1
      containers:
      - name: generate-keycloak-realm-configmap
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e
          # Wait for the postgres secret to be ready
          while [ "$(kubectl get secret postgres -n {{ .Release.Namespace }} -o jsonpath='{.data}')" == "" ]; do
            echo "Waiting for postgres secret..."
            sleep 5
          done
          # Extracting admin password
          ADMIN_PASSWORD=$(kubectl get secret postgres -n default -o jsonpath='{.data.adminPwd}' | base64 --decode)
          echo "$ADMIN_PASSWORD"
          # Generate the ConfigMap with the updated value
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: keycloak-realm-configmap
            namespace: {{ .Release.Namespace }}
          data:
            onms-realm.json: |
              {
                "realm": "{{ .Values.realmName }}",
                "accessTokenLifespan": 6000,
                "enabled": true,
                "loginTheme": "lokahi",
                "emailTheme": "lokahi",
                "rememberMe": true,
                "resetPasswordAllowed": true,
                "clients": [
                  {
                    "clientId": "lokahi",
                    "standardFlowEnabled": true,
                    "enabled": true,
                    "webOrigins": [
                      "*"
                    ],
                    "redirectUris": [
                      "*"
                    ],
                    "publicClient": true,
                    "directAccessGrantsEnabled": true,
                    "protocolMappers": [
                      {
                        "name": "tenant-id",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-hardcoded-claim-mapper",
                        "consentRequired": false,
                        "config": {
                          "claim.value": "opennms-prime",
                          "userinfo.token.claim": "true",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "tenant-id",
                          "access.tokenResponse.claim": "false"
                        }
                      }
                    ],
                    "defaultClientScopes": [
                      "web-origins",
                      "roles",
                      "profile",
                      "email"
                    ],
                    "optionalClientScopes": [
                      "address",
                      "phone",
                      "offline_access",
                      "microprofile-jwt"
                    ]
                  },
                  {
                    "id": "client-grafana",
                    "clientId": "grafana",
                    "name": "grafana",
                    "standardFlowEnabled": true,
                    "enabled": true,
                    "clientAuthenticatorType": "client-secret",
                    "secret": "grafana-client-secret",
                    "protocol": "openid-connect",
                    "webOrigins": [
                      "*"
                    ],
                    "redirectUris": [
                      "*"
                    ],
                    "publicClient": false,
                    "directAccessGrantsEnabled": false,
                    "defaultClientScopes": [
                      "roles",
                      "profile",
                      "email"
                    ],
                    "optionalClientScopes": [
                      "address",
                      "phone",
                      "offline_access",
                      "microprofile-jwt"
                    ]
                  }
                ],
                "roles": {
                  "realm": [
                    {
                      "name": "admin",
                      "composite": false
                    },
                    {
                      "name": "user",
                      "composite": false
                    }
                  ]
                },
                "users": [
                  {
                    "username": "{{ .Values.adminUsername }}",
                    "email": "admin@test.opennms.org",
                    "enabled": true,
                    "emailVerified": false,
                    "credentials": [
                      {
                        "type": "password",
                        "value": "$ADMIN_PASSWORD"
                      }
                    ],
                    "realmRoles": [
                      "admin"
                    ],
                    "clientRoles": {
                      "account": [
                        "manage-account",
                        "view-profile"
                      ],
                      "realm-management": [
                        "manage-users",
                        "view-users",
                        "query-users",
                        "create-client"
                      ]
                    }
                  }
                ]
              }
          EOF
      restartPolicy: OnFailure
{{- end }}